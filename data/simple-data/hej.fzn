predicate fzn_all_different_int(array [int] of var int: x);
predicate fzn_count_eq(array [int] of var int: x,var int: y,var int: c);
array [1..2] of int: X_INTRODUCED_24_ = [1,1];
array [1..7] of int: X_INTRODUCED_27_ = [1,1,1,-1,-1,-1,-1];
var 1..3: X_INTRODUCED_17_;
var 1..3: X_INTRODUCED_18_;
var 1..3: X_INTRODUCED_19_;
var 1..3: X_INTRODUCED_20_;
var 1..3: X_INTRODUCED_21_;
var 1..3: X_INTRODUCED_22_;
var -2..10: obj:: output_var:: is_defined_var;
array [1..2] of var int: x:: output_array([1..2]) = [X_INTRODUCED_17_,X_INTRODUCED_18_];
array [1..2] of var int: y:: output_array([1..2]) = [X_INTRODUCED_19_,X_INTRODUCED_20_];
array [1..2] of var int: z:: output_array([1..2]) = [X_INTRODUCED_21_,X_INTRODUCED_22_];
array [1..6] of var int: X_INTRODUCED_28_ ::var_is_introduced  = [X_INTRODUCED_17_,X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_,X_INTRODUCED_21_,X_INTRODUCED_22_];
constraint fzn_all_different_int(x);
constraint int_lin_eq(X_INTRODUCED_24_,[X_INTRODUCED_19_,X_INTRODUCED_20_],2);
constraint fzn_count_eq(z,5,3);
constraint int_lin_eq(X_INTRODUCED_27_,[obj,X_INTRODUCED_19_,X_INTRODUCED_20_,X_INTRODUCED_17_,X_INTRODUCED_18_,X_INTRODUCED_21_,X_INTRODUCED_22_],0):: defines_var(obj);
solve :: int_search(X_INTRODUCED_28_,input_order,indomain_min,complete) minimize obj;
